[
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Statistical Rethinking Lecture Notes",
    "section": "Welcome",
    "text": "Welcome\nThese are my personal notes for the Statistical Rethinking 2022 course by Richard McElreath found here https://github.com/rmcelreath/stat_rethinking_2022.\n\n\n\n\n\n\nThis book was created using Quarto.\n\n\n\n\n\n\nSource Code\n## Welcome {.unnumbered}\n\nThese are my personal notes for the Statistical Rethinking 2022 course by Richard McElreath found here <https://github.com/rmcelreath/stat_rethinking_2022>.\n\n::: {.callout-note appearance=\"simple\"}\nThis book was created using [Quarto](https://quarto.org).\n:::"
  },
  {
    "objectID": "lecture_1.html",
    "href": "lecture_1.html",
    "title": "\n1  Lecture 1\n",
    "section": "",
    "text": "Code# Load packages\nlibrary(rethinking)\nlibrary(Hmisc)\n\nlibrary(rstanarm)\nlibrary(cmdstanr)\nlibrary(posterior)\nlibrary(bayesplot)\nlibrary(tidybayes)\n\nlibrary(geomtextpath)\nlibrary(cowplot)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(gganimate)\n\nlibrary(tidyverse)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=12,\n                                 font_family = \"Source Sans Pro\"))\n\nset.seed(0.7)\n\n\n\nGoal of this course is to integrate scientific modeling and statistical modeling.\nStatistical modeling can be dangerous - models have no wisdom or foresight.\nCommonly used frequentist tests meant for limited applications. Bespoke statistical models are a better fit for most scientific research.\nThinking about causal inference is essential. DAGs are a great way to start.\n\n\n\n\nSource Code\n# Lecture 1\n\n```{r}\n# Load packages\nlibrary(rethinking)\nlibrary(Hmisc)\n\nlibrary(rstanarm)\nlibrary(cmdstanr)\nlibrary(posterior)\nlibrary(bayesplot)\nlibrary(tidybayes)\n\nlibrary(geomtextpath)\nlibrary(cowplot)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(gganimate)\n\nlibrary(tidyverse)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=12,\n                                 font_family = \"Source Sans Pro\"))\n\nset.seed(0.7)\n```\n\n-   Goal of this course is to integrate scientific modeling and statistical modeling.\n-   Statistical modeling can be dangerous - models have no wisdom or foresight.\n-   Commonly used frequentist tests meant for limited applications. Bespoke statistical models are a better fit for most scientific research.\n-   Thinking about causal inference is essential. DAGs are a great way to start."
  },
  {
    "objectID": "lecture_2.html#grid-approximation-to-the-beta-binomial-model",
    "href": "lecture_2.html#grid-approximation-to-the-beta-binomial-model",
    "title": "\n2  Lecture 2\n",
    "section": "\n2.1 Grid approximation to the beta-binomial model",
    "text": "2.1 Grid approximation to the beta-binomial model\nThe grid approximation works using these steps:\n\nSpecify the number of data points for the grid, here it is 1000.\nFor each of the grid points, specify the prior probability. Here we use a staircase shape where the values 0 to 0.5 have a prior weight of 1, and values 0.5 to 1 have a prior weight of 4. Using these weights and the grid size, we can then normalize the prior to integrate to 1.\nSpecify the likelihood for each value of the grid points. This is the stage where we use the data.\nMultiply the prior and likelihood, to get the unnormalized posterior, which can then be normalized the get the posterior.\n\n\nCodegrid_size <- 1000\n\ndata <- sample(c(0,1), replace=TRUE, prob=c(0.3, 0.7), size=8)\n\np_grid <- seq(0,1, length.out = grid_size)\n\nprior <-\n  c(\n  rep(1, grid_size/2),\n  rep(4, grid_size/2)\n  )\n\nprior <- (prior / sum(prior))\n           \nlikelihood <- dbinom(x = sum(data), size = length(data), prob = p_grid)\nposterior <- prior * likelihood\n\n\n\nCode# Note that the (unnormalized) posterior doesn't sum to 1\nsum(posterior)\n\n[1] 0.111\n\n\n\nCode# Normalize the posterior\nposterior <- (posterior / sum(posterior))\n\n\n\nCode# Normalize the likelihood\nlikelihood <- (likelihood / sum(likelihood))\n\n\n\nCode# Create plot of prior, likelihood, and posterior\ntibble(p = p_grid, prior, likelihood, posterior) %>%\n  pivot_longer(prior:posterior, names_to = \"name\", values_to = \"value\") %>%\n  mutate(name = factor(name, levels = c(\"prior\", \"likelihood\", \"posterior\"))) %>%\n  ggplot() +\n  aes(x= p, y=value, color=name) +\n  geom_line() +\n  facet_wrap(~name)"
  },
  {
    "objectID": "lecture_2.html#animate-grid-approximation",
    "href": "lecture_2.html#animate-grid-approximation",
    "title": "\n2  Lecture 2\n",
    "section": "\n2.2 Animate grid approximation",
    "text": "2.2 Animate grid approximation\n\nCoden_samples <- 100\n\ndata <- sample(c(0,1), replace=TRUE, prob=c(0.3, 0.7), size=n_samples)\n\n# Sample `n_samples` samples from the globe\nsubsets <- purrr::map(1:length(data), ~data[1:.x])\n\n\n\nCodegenerate_dataset <- function(data){\n  \n  grid_size <- 2000 * 3\n  \n  p_grid <- seq(0,1, length.out = grid_size)\n\n  prior <-\n    c(\n    rep(1, grid_size/3),\n    rep(4, grid_size/3),\n    rep(6, grid_size/3)\n    )\n  \n  prior <- (prior / sum(prior))\n             \n  likelihood <- dbinom(x = sum(data), size = length(data), prob = p_grid)\n  posterior <- prior * likelihood\n  \n  posterior <- (posterior / sum(posterior))\n  \n  likelihood <- (likelihood / sum(likelihood))\n  \n  df <- \n    tibble(p = p_grid, prior, likelihood, posterior) %>%\n    pivot_longer(prior:posterior, names_to = \"name\", values_to = \"value\")\n  \n  return(df)\n}\n\n\n\nCodedf <-\n  purrr::map_dfr(subsets, ~generate_dataset(.x), .id = \"subset\") %>%\n  mutate(subset = as.integer(subset))\n\n\n\nCodecred <-\ndf %>%\n  filter(name == \"posterior\") %>%\n  group_by(subset) %>%\n  summarize(lower = p[which(cumsum(value) < 0.025)] %>% tail(n=1),\n            upper = p[which(cumsum(value) > 0.975)] %>% head(n=1)) %>%\n  mutate(name = factor(\"Posterior\", levels = c(\"Prior\", \"Likelihood\", \"Posterior\"))) %>%\n  mutate(lower = round(lower,3),\n         upper = round(upper,3)) %>%\n  mutate(label = glue(\"95% Posterior Interval:\\n[{lower}, {upper}]\"))\n\n\n\nCodeanim <-\ndf %>%\n    mutate(name = recode(name,\n                       `likelihood` = \"Likelihood\",\n                       `prior` = \"Prior\",\n                       `posterior` = \"Posterior\")) %>%\n    ggplot() +\n    aes(x= p, y=value, color=name) +\n    geom_line() +\n    geom_text(data=cred, mapping=aes(label=label), x = 0.25, y = 0.0015, color=\"black\") +\n    geom_segment(data=cred,\n                 mapping = aes(x = lower, xend = upper, y = 0, yend = 0),\n                 size=3,\n                 alpha=0.6,\n                 color=\"black\",\n                 lineend = \"round\") +\n    geom_vline(xintercept = 0.7, linetype=2, alpha=0.7) +\n    facet_wrap(~fct_relevel(name,\"Prior\", \"Likelihood\", \"Posterior\")) +\n    theme(legend.position = \"none\") +\n    labs(x = \"Probability of water\",\n         y = \"Probability Density\",\n         title = \"Data points: {current_frame}\") +\n    transition_manual(frame = subset)\n\nanimate(anim,\n        duration=10,\n        height = 6,\n        width = 12,\n        units = \"in\",\n        res = 300,\n        renderer = ffmpeg_renderer())"
  },
  {
    "objectID": "lecture_2.html#posterior-predictive-distribution",
    "href": "lecture_2.html#posterior-predictive-distribution",
    "title": "\n2  Lecture 2\n",
    "section": "\n2.3 Posterior Predictive Distribution",
    "text": "2.3 Posterior Predictive Distribution"
  },
  {
    "objectID": "lecture_2.html#writing-the-model-in-stan",
    "href": "lecture_2.html#writing-the-model-in-stan",
    "title": "\n2  Lecture 2\n",
    "section": "\n2.4 Writing the model in Stan",
    "text": "2.4 Writing the model in Stan\n\nCodedata {\n    int<lower=0> N;\n    int <lower=0, upper=N> y;\n}\n\nparameters {\n    real<lower=0, upper=1> theta;\n}\n\nmodel {\n    theta ~ beta(1,1);      //prior\n    y ~ binomial(N, theta); //likelihood\n}\n\n\n\nCodemodel$print()\n\ndata {\n    int<lower=0> N;\n    int <lower=0, upper=N> y;\n}\n\nparameters {\n    real<lower=0, upper=1> theta;\n}\n\nmodel {\n    theta ~ beta(1,1);      //prior\n    y ~ binomial(N, theta); //likelihood\n}\n\n\n\n\n\nSource Code\n# Lecture 2\n\n```{r}\n# Load packages\nlibrary(rethinking)\nlibrary(Hmisc)\n\nlibrary(rstanarm)\nlibrary(cmdstanr)\nlibrary(posterior)\nlibrary(bayesplot)\nlibrary(tidybayes)\n\nlibrary(geomtextpath)\nlibrary(cowplot)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(gganimate)\n\nlibrary(tidyverse)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=14,\n                                 font_family = \"Source Sans Pro\"))\n\ncmdstanr::register_knitr_engine(override = TRUE)\n\noptions(mc.cores = parallel::detectCores())\n\nset.seed(0.7)\n```\n\n## Grid approximation to the beta-binomial model\n\nThe grid approximation works using these steps:\n\n-   Specify the number of data points for the grid, here it is 1000.\n-   For each of the grid points, specify the prior probability. Here we use a staircase shape where the values 0 to 0.5 have a prior weight of 1, and values 0.5 to 1 have a prior weight of 4. Using these weights and the grid size, we can then normalize the prior to integrate to 1.\n-   Specify the likelihood for each value of the grid points. This is the stage where we use the data.\n-   Multiply the prior and likelihood, to get the unnormalized posterior, which can then be normalized the get the posterior.\n\n```{r}\ngrid_size <- 1000\n\ndata <- sample(c(0,1), replace=TRUE, prob=c(0.3, 0.7), size=8)\n\np_grid <- seq(0,1, length.out = grid_size)\n\nprior <-\n  c(\n  rep(1, grid_size/2),\n  rep(4, grid_size/2)\n  )\n\nprior <- (prior / sum(prior))\n           \nlikelihood <- dbinom(x = sum(data), size = length(data), prob = p_grid)\nposterior <- prior * likelihood\n```\n\n```{r}\n# Note that the (unnormalized) posterior doesn't sum to 1\nsum(posterior)\n```\n\n```{r}\n# Normalize the posterior\nposterior <- (posterior / sum(posterior))\n```\n\n```{r}\n# Normalize the likelihood\nlikelihood <- (likelihood / sum(likelihood))\n```\n\n```{r}\n# Create plot of prior, likelihood, and posterior\ntibble(p = p_grid, prior, likelihood, posterior) %>%\n  pivot_longer(prior:posterior, names_to = \"name\", values_to = \"value\") %>%\n  mutate(name = factor(name, levels = c(\"prior\", \"likelihood\", \"posterior\"))) %>%\n  ggplot() +\n  aes(x= p, y=value, color=name) +\n  geom_line() +\n  facet_wrap(~name)\n```\n\n## Animate grid approximation\n\n```{r}\nn_samples <- 100\n\ndata <- sample(c(0,1), replace=TRUE, prob=c(0.3, 0.7), size=n_samples)\n\n# Sample `n_samples` samples from the globe\nsubsets <- purrr::map(1:length(data), ~data[1:.x])\n```\n\n```{r}\ngenerate_dataset <- function(data){\n  \n  grid_size <- 2000 * 3\n  \n  p_grid <- seq(0,1, length.out = grid_size)\n\n  prior <-\n    c(\n    rep(1, grid_size/3),\n    rep(4, grid_size/3),\n    rep(6, grid_size/3)\n    )\n  \n  prior <- (prior / sum(prior))\n             \n  likelihood <- dbinom(x = sum(data), size = length(data), prob = p_grid)\n  posterior <- prior * likelihood\n  \n  posterior <- (posterior / sum(posterior))\n  \n  likelihood <- (likelihood / sum(likelihood))\n  \n  df <- \n    tibble(p = p_grid, prior, likelihood, posterior) %>%\n    pivot_longer(prior:posterior, names_to = \"name\", values_to = \"value\")\n  \n  return(df)\n}\n```\n\n```{r}\ndf <-\n  purrr::map_dfr(subsets, ~generate_dataset(.x), .id = \"subset\") %>%\n  mutate(subset = as.integer(subset))\n```\n\n```{r}\ncred <-\ndf %>%\n  filter(name == \"posterior\") %>%\n  group_by(subset) %>%\n  summarize(lower = p[which(cumsum(value) < 0.025)] %>% tail(n=1),\n            upper = p[which(cumsum(value) > 0.975)] %>% head(n=1)) %>%\n  mutate(name = factor(\"Posterior\", levels = c(\"Prior\", \"Likelihood\", \"Posterior\"))) %>%\n  mutate(lower = round(lower,3),\n         upper = round(upper,3)) %>%\n  mutate(label = glue(\"95% Posterior Interval:\\n[{lower}, {upper}]\"))\n```\n\n```{r}\n#| out-width: 100%\n#| eval: false\n\nanim <-\ndf %>%\n    mutate(name = recode(name,\n                       `likelihood` = \"Likelihood\",\n                       `prior` = \"Prior\",\n                       `posterior` = \"Posterior\")) %>%\n    ggplot() +\n    aes(x= p, y=value, color=name) +\n    geom_line() +\n    geom_text(data=cred, mapping=aes(label=label), x = 0.25, y = 0.0015, color=\"black\") +\n    geom_segment(data=cred,\n                 mapping = aes(x = lower, xend = upper, y = 0, yend = 0),\n                 size=3,\n                 alpha=0.6,\n                 color=\"black\",\n                 lineend = \"round\") +\n    geom_vline(xintercept = 0.7, linetype=2, alpha=0.7) +\n    facet_wrap(~fct_relevel(name,\"Prior\", \"Likelihood\", \"Posterior\")) +\n    theme(legend.position = \"none\") +\n    labs(x = \"Probability of water\",\n         y = \"Probability Density\",\n         title = \"Data points: {current_frame}\") +\n    transition_manual(frame = subset)\n\nanimate(anim,\n        duration=10,\n        height = 6,\n        width = 12,\n        units = \"in\",\n        res = 300,\n        renderer = ffmpeg_renderer())\n```\n\n## Posterior Predictive Distribution\n\n## Writing the model in Stan\n\n```{stan, output.var = \"model\"}\ndata {\n    int<lower=0> N;\n    int <lower=0, upper=N> y;\n}\n\nparameters {\n    real<lower=0, upper=1> theta;\n}\n\nmodel {\n    theta ~ beta(1,1);      //prior\n    y ~ binomial(N, theta); //likelihood\n}\n```\n\n```{r}\nmodel$print()\n```"
  },
  {
    "objectID": "lecture_3.html",
    "href": "lecture_3.html",
    "title": "\n3  Lecture 3\n",
    "section": "",
    "text": "Code# Load packages\nlibrary(rethinking)\nlibrary(Hmisc)\n\nlibrary(rstanarm)\nlibrary(cmdstanr)\nlibrary(posterior)\nlibrary(bayesplot)\nlibrary(tidybayes)\n\nlibrary(geomtextpath)\nlibrary(cowplot)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(gganimate)\n\nlibrary(tidyverse)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=12,\n                                 font_family = \"Source Sans Pro\"))\n\nset.seed(0.7)\n\n\n\n\n\nSource Code\n# Lecture 3\n\n```{r}\n# Load packages\nlibrary(rethinking)\nlibrary(Hmisc)\n\nlibrary(rstanarm)\nlibrary(cmdstanr)\nlibrary(posterior)\nlibrary(bayesplot)\nlibrary(tidybayes)\n\nlibrary(geomtextpath)\nlibrary(cowplot)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(gganimate)\n\nlibrary(tidyverse)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=12,\n                                 font_family = \"Source Sans Pro\"))\n\nset.seed(0.7)\n```"
  },
  {
    "objectID": "lecture_4.html",
    "href": "lecture_4.html",
    "title": "\n4  Lecture 4\n",
    "section": "",
    "text": "Code# Load packages\nlibrary(rethinking)\nlibrary(Hmisc)\n\nlibrary(rstanarm)\nlibrary(cmdstanr)\nlibrary(posterior)\nlibrary(bayesplot)\nlibrary(tidybayes)\n\nlibrary(geomtextpath)\nlibrary(cowplot)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(gganimate)\n\nlibrary(tidyverse)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=12,\n                                 font_family = \"Source Sans Pro\"))\n\nset.seed(0.7)\n\n\n\n\n\nSource Code\n# Lecture 4\n\n```{r}\n# Load packages\nlibrary(rethinking)\nlibrary(Hmisc)\n\nlibrary(rstanarm)\nlibrary(cmdstanr)\nlibrary(posterior)\nlibrary(bayesplot)\nlibrary(tidybayes)\n\nlibrary(geomtextpath)\nlibrary(cowplot)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(gganimate)\n\nlibrary(tidyverse)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=12,\n                                 font_family = \"Source Sans Pro\"))\n\nset.seed(0.7)\n```"
  },
  {
    "objectID": "lecture_5.html",
    "href": "lecture_5.html",
    "title": "\n5  Lecture 5\n",
    "section": "",
    "text": "Code# Load packages\nlibrary(rethinking)\nlibrary(Hmisc)\n\nlibrary(rstanarm)\nlibrary(cmdstanr)\nlibrary(posterior)\nlibrary(bayesplot)\nlibrary(tidybayes)\n\nlibrary(geomtextpath)\nlibrary(cowplot)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(gganimate)\n\nlibrary(tidyverse)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=12,\n                                 font_family = \"Source Sans Pro\"))\n\nset.seed(0.7)\n\n\n\n\n\nSource Code\n# Lecture 5\n\n```{r}\n# Load packages\nlibrary(rethinking)\nlibrary(Hmisc)\n\nlibrary(rstanarm)\nlibrary(cmdstanr)\nlibrary(posterior)\nlibrary(bayesplot)\nlibrary(tidybayes)\n\nlibrary(geomtextpath)\nlibrary(cowplot)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(gganimate)\n\nlibrary(tidyverse)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=12,\n                                 font_family = \"Source Sans Pro\"))\n\nset.seed(0.7)\n```"
  },
  {
    "objectID": "eight_schools_case_study.html#load-packages",
    "href": "eight_schools_case_study.html#load-packages",
    "title": "\n6  Eight Schools Case Study\n",
    "section": "\n6.1 Load packages",
    "text": "6.1 Load packages\n\nCode# Load packages\nlibrary(cmdstanr)\ncmdstanr::register_knitr_engine(override = FALSE)\n\nlibrary(rethinking)\nlibrary(Hmisc)\n\nlibrary(posterior)\nlibrary(bayesplot)\nlibrary(tidybayes)\n\nlibrary(geomtextpath)\nlibrary(cowplot)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(gganimate)\n\nlibrary(tidyverse)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=12,\n                                 font_family = \"Source Sans Pro\"))\n\nset.seed(0.7)"
  },
  {
    "objectID": "eight_schools_case_study.html#read-in-data",
    "href": "eight_schools_case_study.html#read-in-data",
    "title": "\n6  Eight Schools Case Study\n",
    "section": "\n6.2 Read in data",
    "text": "6.2 Read in data\n\nCodeJ <- 8\ny <- c(28, 8, -3, 7, -1, 1, 18, 12)\nsigma <- c(15, 10, 16, 11, 9, 11, 10, 18)\n\ndata_list <- list(J=J, y=y, sigma=sigma)"
  },
  {
    "objectID": "eight_schools_case_study.html#centered-stan-model",
    "href": "eight_schools_case_study.html#centered-stan-model",
    "title": "\n6  Eight Schools Case Study\n",
    "section": "\n6.3 Centered STAN model",
    "text": "6.3 Centered STAN model\n\nCodedata {\n  int<lower=0> J;\n  real y[J];\n  real<lower=0> sigma[J];\n}\n\nparameters {\n  real mu;\n  real<lower=0> tau;\n  real theta[J];\n}\n\nmodel {\n  mu ~ normal(0, 5);\n  tau ~ cauchy(0, 5);\n  theta ~ normal(mu, tau);\n  y ~ normal(theta, sigma);\n}"
  },
  {
    "objectID": "eight_schools_case_study.html#fit-with-centered-model-with-varying-adapt-delta",
    "href": "eight_schools_case_study.html#fit-with-centered-model-with-varying-adapt-delta",
    "title": "\n6  Eight Schools Case Study\n",
    "section": "\n6.4 Fit with centered model with varying adapt delta",
    "text": "6.4 Fit with centered model with varying adapt delta\n\nCodemake_plot <- function(adapt_delta){\n  \n  fit <-\n    model$sample(\n      data = data_list, \n      seed = 123, \n      chains = 4, \n      parallel_chains = 4,\n      refresh = 0,\n      adapt_delta = adapt_delta,\n      iter_sampling = 8000,\n      show_messages=FALSE)\n  \n  draws <-\n  fit$draws(format=\"df\") %>%\n  mutate(log_tau = log(tau))\n  \n  draws %>%\n  ggplot() +\n  aes(x = `theta[1]`,\n      y = log_tau) +\n  geom_point(alpha=0.2) +\n  coord_cartesian(ylim = c(-4, 4), xlim = c(-40,40)) +\n  labs(subtitle = glue(\"Adapt delta = {adapt_delta}\"))\n}\n\n\n\nCodep1 <- make_plot(0.8)\np2 <- make_plot(0.85)\np3 <- make_plot(0.9)\np4 <- make_plot(0.95)\np5 <- make_plot(0.99)\n\n\n\nCode(p1 + p2 + p3 + p4 + p5) +\n  plot_layout(ncol = 5)"
  },
  {
    "objectID": "eight_schools_case_study.html#non-centered-stan-model",
    "href": "eight_schools_case_study.html#non-centered-stan-model",
    "title": "\n6  Eight Schools Case Study\n",
    "section": "\n6.5 Non-centered STAN model",
    "text": "6.5 Non-centered STAN model\n\nCodedata {\n  int<lower=0> J;\n  real y[J];\n  real<lower=0> sigma[J];\n}\n\nparameters {\n  real mu;\n  real<lower=0> tau;\n  real theta_tilde[J];\n}\n\ntransformed parameters {\n  real theta[J];\n  for (j in 1:J)\n    theta[j] = mu + tau * theta_tilde[j];\n}\n\nmodel {\n  mu ~ normal(0, 5);\n  tau ~ cauchy(0, 5);\n  theta_tilde ~ normal(0, 1);\n  y ~ normal(theta, sigma);\n}\n\n\n\nCodep1 <- make_plot(0.8)\np2 <- make_plot(0.85)\np3 <- make_plot(0.9)\np4 <- make_plot(0.95)\np5 <- make_plot(0.99)\n\n\n\nCode(p1 + p2 + p3 + p4 + p5) +\n  plot_layout(ncol = 5)\n\n\n\n\n\n\n\nSource Code\n# Eight Schools Case Study\n\n## Load packages\n\n```{r}\n# Load packages\nlibrary(cmdstanr)\ncmdstanr::register_knitr_engine(override = FALSE)\n\nlibrary(rethinking)\nlibrary(Hmisc)\n\nlibrary(posterior)\nlibrary(bayesplot)\nlibrary(tidybayes)\n\nlibrary(geomtextpath)\nlibrary(cowplot)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(gganimate)\n\nlibrary(tidyverse)\n\n# Set global ggplot theme\ntheme_set(cowplot::theme_cowplot(font_size=12,\n                                 font_family = \"Source Sans Pro\"))\n\nset.seed(0.7)\n```\n\n## Read in data\n\n```{r}\nJ <- 8\ny <- c(28, 8, -3, 7, -1, 1, 18, 12)\nsigma <- c(15, 10, 16, 11, 9, 11, 10, 18)\n\ndata_list <- list(J=J, y=y, sigma=sigma)\n```\n\n## Centered STAN model\n\n```{cmdstan, output.var = \"model\"}\n#| code-fold: show\n\ndata {\n  int<lower=0> J;\n  real y[J];\n  real<lower=0> sigma[J];\n}\n\nparameters {\n  real mu;\n  real<lower=0> tau;\n  real theta[J];\n}\n\nmodel {\n  mu ~ normal(0, 5);\n  tau ~ cauchy(0, 5);\n  theta ~ normal(mu, tau);\n  y ~ normal(theta, sigma);\n}\n```\n\n## Fit with centered model with varying adapt delta\n\n```{r}\nmake_plot <- function(adapt_delta){\n  \n  fit <-\n    model$sample(\n      data = data_list, \n      seed = 123, \n      chains = 4, \n      parallel_chains = 4,\n      refresh = 0,\n      adapt_delta = adapt_delta,\n      iter_sampling = 8000,\n      show_messages=FALSE)\n  \n  draws <-\n  fit$draws(format=\"df\") %>%\n  mutate(log_tau = log(tau))\n  \n  draws %>%\n  ggplot() +\n  aes(x = `theta[1]`,\n      y = log_tau) +\n  geom_point(alpha=0.2) +\n  coord_cartesian(ylim = c(-4, 4), xlim = c(-40,40)) +\n  labs(subtitle = glue(\"Adapt delta = {adapt_delta}\"))\n}\n```\n\n```{r}\n#| output: false\np1 <- make_plot(0.8)\np2 <- make_plot(0.85)\np3 <- make_plot(0.9)\np4 <- make_plot(0.95)\np5 <- make_plot(0.99)\n```\n\n```{r}\n#| fig-width: 12\n\n(p1 + p2 + p3 + p4 + p5) +\n  plot_layout(ncol = 5)\n```\n\n## Non-centered STAN model\n\n```{cmdstan, output.var = \"model\"}\n#| code-fold: show\n\ndata {\n  int<lower=0> J;\n  real y[J];\n  real<lower=0> sigma[J];\n}\n\nparameters {\n  real mu;\n  real<lower=0> tau;\n  real theta_tilde[J];\n}\n\ntransformed parameters {\n  real theta[J];\n  for (j in 1:J)\n    theta[j] = mu + tau * theta_tilde[j];\n}\n\nmodel {\n  mu ~ normal(0, 5);\n  tau ~ cauchy(0, 5);\n  theta_tilde ~ normal(0, 1);\n  y ~ normal(theta, sigma);\n}\n```\n\n```{r}\n#| output: false\np1 <- make_plot(0.8)\np2 <- make_plot(0.85)\np3 <- make_plot(0.9)\np4 <- make_plot(0.95)\np5 <- make_plot(0.99)\n```\n\n```{r}\n#| fig-width: 12\n\n(p1 + p2 + p3 + p4 + p5) +\n  plot_layout(ncol = 5)\n```"
  }
]